{"version":3,"sources":["components/QuoteDisplay.js","App.js","serviceWorker.js","index.js"],"names":["QuoteDisplay","useState","quote","setQuote","author","setAuthor","setError","showLoader","setShowLoader","tweetUrl","setTweetUrl","useEffect","fetchQuote","axios","get","then","res","console","log","data","quoteText","quoteAuthor","catch","err","message","id","onClick","href","title","target","color","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"2SAgDeA,EA5CM,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,OAEKF,mBAAS,IAFd,mBAEhBG,EAFgB,KAERC,EAFQ,OAGGJ,mBAAS,IAHZ,mBAGTK,GAHS,aAIaL,oBAAS,GAJtB,mBAIhBM,EAJgB,KAIJC,EAJI,OAKSP,mBAAS,IALlB,mBAKhBQ,EALgB,KAKNC,EALM,KAOvBC,qBAAU,WACNC,MACF,IAEF,IAAMA,EAAa,WACfJ,GAAc,GACdK,IAAMC,IAAI,2DACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZb,EAASa,EAAIG,KAAKjB,MAAMkB,WACxBf,EAAUW,EAAIG,KAAKjB,MAAMmB,aACzBX,EAAY,4CAAD,OAA6CM,EAAIG,KAAKjB,MAAMkB,UAA5D,oBAAiFJ,EAAIG,KAAKjB,MAAMmB,iBAE9GN,MAAK,WACFP,GAAc,MAEjBc,OAAM,SAAAC,GACHN,QAAQC,IAAIK,EAAIC,SAChBlB,EAASiB,EAAIC,aAIrB,OAEIjB,EACA,yCAEA,yBAAKkB,GAAG,aACJ,uBAAGA,GAAG,QAAQvB,GACd,uBAAGuB,GAAG,UAAN,KAAkBrB,GAClB,4BAAQqB,GAAG,YAAYC,QAASd,GAAhC,aACA,uBAAGe,KAAMlB,EAAUmB,MAAM,mBAAmBC,OAAO,SAASJ,GAAG,eAAc,kBAAC,IAAD,CAAeK,MAAM,eC5B/FC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACL/B,QAAQ+B,MAAMA,EAAMxB,c","file":"static/js/main.7f9da99f.chunk.js","sourcesContent":["import React, { useEffect, useState} from 'react'\nimport axios from 'axios'\nimport { IoLogoTwitter } from 'react-icons/io'\n\nconst QuoteDisplay = () => {\n    const [quote, setQuote] = useState('')\n    const [author, setAuthor] = useState('')\n    const [error, setError] = useState('')\n    const [showLoader, setShowLoader] = useState(false)\n    const [tweetUrl, setTweetUrl] = useState('')\n\n    useEffect(() => {\n        fetchQuote()\n    },[])\n\n    const fetchQuote = () => {\n        setShowLoader(true)\n        axios.get('https://quote-garden.herokuapp.com/api/v2/quotes/random')\n        .then(res => {\n            console.log(res)\n            setQuote(res.data.quote.quoteText)\n            setAuthor(res.data.quote.quoteAuthor)\n            setTweetUrl(`https://twitter.com/intent/tweet?text=%22${res.data.quote.quoteText}%22 \\n - ${res.data.quote.quoteAuthor}`)\n        })\n        .then(() => {\n            setShowLoader(false)\n        })\n        .catch(err => {\n            console.log(err.message)\n            setError(err.message)\n        })\n    }\n\n    return (\n        \n        showLoader ? \n        <p>...loading</p>\n        :\n        <div id=\"quote-box\">\n            <p id=\"text\">{quote}</p>\n            <p id=\"author\">- {author}</p>\n            <button id=\"new-quote\" onClick={fetchQuote}>New Quote</button>\n            <a href={tweetUrl} title=\"tweet this quote\" target=\"_blank\" id=\"tweet-quote\"><IoLogoTwitter color=\"#fa8072\"/></a>\n        </div>\n        \n    )\n}\n\nexport default QuoteDisplay\n","import React from 'react';\nimport './App.css';\n\nimport QuoteDisplay from './components/QuoteDisplay'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteDisplay />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}